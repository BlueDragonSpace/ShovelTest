[gd_resource type="VisualShader" load_steps=4 format=3 uid="uid://ci1fplbau6lkg"]

[sub_resource type="VisualShaderNodeIf" id="VisualShaderNodeIf_gxy5b"]
output_port_for_preview = 0
default_input_values = [0, 0.0, 1, 2.135, 2, 1e-05, 3, Vector3(0, 0, 0), 4, Vector3(0, 0, 0), 5, Vector3(0, 0, 0)]

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_bfxua"]
output_port_for_preview = 0
input_name = "uv"

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_850k0"]
constant = 0.5

[resource]
code = "shader_type canvas_item;
render_mode blend_mix;




void fragment() {
// Input:3
	vec2 n_out3p0 = UV;


// FloatConstant:4
	float n_out4p0 = 0.500000;


	vec3 n_out2p0;
// If:2
	float n_in2p2 = 0.00001;
	vec3 n_in2p3 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_in2p4 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_in2p5 = vec3(0.00000, 0.00000, 0.00000);
	if(abs(n_out3p0.x - n_out4p0) < n_in2p2)
	{
		n_out2p0 = n_in2p3;
	}
	else if(n_out3p0.x < n_out4p0)
	{
		n_out2p0 = n_in2p5;
	}
	else
	{
		n_out2p0 = n_in2p4;
	}


// Output:0
	COLOR.rgb = n_out2p0;


}
"
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(500, 120)
nodes/fragment/2/node = SubResource("VisualShaderNodeIf_gxy5b")
nodes/fragment/2/position = Vector2(100, 140)
nodes/fragment/3/node = SubResource("VisualShaderNodeInput_bfxua")
nodes/fragment/3/position = Vector2(-380, 140)
nodes/fragment/4/node = SubResource("VisualShaderNodeFloatConstant_850k0")
nodes/fragment/4/position = Vector2(-180, 40)
nodes/fragment/connections = PackedInt32Array(3, 0, 2, 0, 4, 0, 2, 1, 2, 0, 0, 0)
